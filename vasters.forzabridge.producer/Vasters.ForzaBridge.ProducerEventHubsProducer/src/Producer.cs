
// This code was auto-generated by xRegistry CLI

// This code was generated by the xRegistry tool.
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.

#nullable enable

using CloudNative.CloudEvents;
using CloudNative.CloudEvents.SystemTextJson;
using Azure.Messaging.EventHubs;
using Azure.Messaging.EventHubs.Producer;

namespace Vasters.ForzaBridge.Producer.ForzaMotorsport.Telemetry
{
    /// <summary>
    /// Producer class to send events in the `ForzaMotorsport.Telemetry` message group.
    /// </summary>
    public partial class TelemetryProducer
    {

        /// <summary>
        /// Constructor
        /// </summary>
        public TelemetryProducer(EventHubProducerClient client)
        {
            this.Client = client;
        }

        /// <summary>
        /// Event Hub producer client
        /// </summary>
        public EventHubProducerClient Client
        {
            get; private set;
        }

        
        /// <summary>
        /// Publish the `ForzaMotorsport.Telemetry.Channel` event
        /// Event description: "Channel Timeseries Event"
        /// </summary>
        /// <param name="data">The event data object.</param>
        /// <param name="tenantid"> URI template argument</param>
        /// <param name="carId"> URI template argument</param>
        /// <param name="channelId"> URI template argument</param>
        /// <param name="contentType">The desired content type of the message data.</param>
        /// <param name="formatter">The CloudEvent formatter to use for structured mode, e.g. JsonEventFormatter.</param>
        /// <returns>An `EventData` instance for the ForzaMotorsport.Telemetry.Channel message.</returns>
        public Task SendChannelAsync(
        global::Vasters.ForzaBridge.ProducerData.ForzaMotorsport.Telemetry.Channel data, string tenantid, string carId, string channelId, string contentType = "application/json+gzip", CloudEventFormatter? formatter = null)
        {
            var eventData = TelemetryEventFactory.CreateChannelEvent(data,tenantid,carId,channelId,contentType, formatter);
            return this.Client.SendAsync(new []{eventData});
        }

        /// <summary>
        /// Send a batch of `ForzaMotorsport.Telemetry.Channel` events
        /// Event description: "Channel Timeseries Event"
        /// </summary>
        /// <param name="data">The event data objects.</param>
        /// <param name="tenantid"> URI template argument</param>
        /// <param name="carId"> URI template argument</param>
        /// <param name="channelId"> URI template argument</param>
        /// <param name="contentType">The desired content type of the message data.</param>
        /// <param name="formatter">The CloudEvent formatter to use for structured mode, e.g. JsonEventFormatter.</param>
        /// <returns>Task object</returns>
        public async Task SendChannelBatchAsync(
        global::Vasters.ForzaBridge.ProducerData.ForzaMotorsport.Telemetry.Channel[] data, string tenantid, string carId, string channelId, string contentType = "application/json+gzip", CloudEventFormatter? formatter = null)
        {
            var batch = await this.Client.CreateBatchAsync();
            foreach( var record in data )
            {
                var eventData = TelemetryEventFactory.CreateChannelEvent(record,tenantid,carId,channelId,contentType, formatter);
                if ( !batch.TryAdd(eventData))
                {
                    await this.Client.SendAsync(batch);
                    batch = await this.Client.CreateBatchAsync();
                    batch.TryAdd(eventData);
                }
            }
            if (batch.Count > 0)
            {
                await this.Client.SendAsync(batch);
            }
        }
        
        /// <summary>
        /// Publish the `ForzaMotorsport.Telemetry.LapSignal` event
        /// Event description: "LapSignal Event"
        /// </summary>
        /// <param name="data">The event data object.</param>
        /// <param name="tenantid"> URI template argument</param>
        /// <param name="carId"> URI template argument</param>
        /// <param name="sessionId"> URI template argument</param>
        /// <param name="contentType">The desired content type of the message data.</param>
        /// <param name="formatter">The CloudEvent formatter to use for structured mode, e.g. JsonEventFormatter.</param>
        /// <returns>An `EventData` instance for the ForzaMotorsport.Telemetry.LapSignal message.</returns>
        public Task SendLapSignalAsync(
        global::Vasters.ForzaBridge.ProducerData.ForzaMotorsport.Telemetry.LapSignal data, string tenantid, string carId, string sessionId, string contentType = "application/json+gzip", CloudEventFormatter? formatter = null)
        {
            var eventData = TelemetryEventFactory.CreateLapSignalEvent(data,tenantid,carId,sessionId,contentType, formatter);
            return this.Client.SendAsync(new []{eventData});
        }

        /// <summary>
        /// Send a batch of `ForzaMotorsport.Telemetry.LapSignal` events
        /// Event description: "LapSignal Event"
        /// </summary>
        /// <param name="data">The event data objects.</param>
        /// <param name="tenantid"> URI template argument</param>
        /// <param name="carId"> URI template argument</param>
        /// <param name="sessionId"> URI template argument</param>
        /// <param name="contentType">The desired content type of the message data.</param>
        /// <param name="formatter">The CloudEvent formatter to use for structured mode, e.g. JsonEventFormatter.</param>
        /// <returns>Task object</returns>
        public async Task SendLapSignalBatchAsync(
        global::Vasters.ForzaBridge.ProducerData.ForzaMotorsport.Telemetry.LapSignal[] data, string tenantid, string carId, string sessionId, string contentType = "application/json+gzip", CloudEventFormatter? formatter = null)
        {
            var batch = await this.Client.CreateBatchAsync();
            foreach( var record in data )
            {
                var eventData = TelemetryEventFactory.CreateLapSignalEvent(record,tenantid,carId,sessionId,contentType, formatter);
                if ( !batch.TryAdd(eventData))
                {
                    await this.Client.SendAsync(batch);
                    batch = await this.Client.CreateBatchAsync();
                    batch.TryAdd(eventData);
                }
            }
            if (batch.Count > 0)
            {
                await this.Client.SendAsync(batch);
            }
        }
        
    }
}
