.create-merge table [_cloudevents_dispatch] (
    [specversion]: string,
    [type]: string,
    [source]: string,
    [id]: string,
    [time]: datetime,
    [subject]: string,
    [datacontenttype]: string,
    [dataschema]: string,
    [data]: dynamic
);


.create-or-alter table [_cloudevents_dispatch] ingestion json mapping "_cloudevents_dispatch_json"
```
[
  {"column": "specversion", "path": "$.specversion"},
  {"column": "type", "path": "$.type"},
  {"column": "source", "path": "$.source"},
  {"column": "id", "path": "$.id"},
  {"column": "time", "path": "$.time"},
  {"column": "subject", "path": "$.subject"},
  {"column": "datacontenttype", "path": "$.datacontenttype"},
  {"column": "dataschema", "path": "$.dataschema"},
  {"column": "data", "path": "$.data"}
]
```


.create-merge table [Channel] (
   [ChannelId]: string,
   [CarId]: string,
   [SessionId]: string,
   [LapId]: string,
   [SampleCount]: long,
   [Frequency]: long,
   [Timespan]: dynamic,
   [Data]: dynamic,
   [___type]: string,
   [___source]: string,
   [___id]: string,
   [___time]: datetime,
   [___subject]: string
);

.alter table [Channel] column-docstrings (
   [ChannelId]: "{\"description\": \"The unique identifier of the channel\", \"schema\": \"{ \\\"doc\\\": \\\"Schema too large to inline. Please refer to the Avro schema for more details.\\\" }\"}",
   [CarId]: "{\"description\": \"The unique identifier of the car\", \"schema\": [\"null\", \"string\"]}",
   [SessionId]: "{\"description\": \"The unique identifier of the session\", \"schema\": [\"null\", \"string\"]}",
   [SampleCount]: "{\"description\": \"The number of samples in this batch\"}",
   [Frequency]: "{\"description\": \"The frequency of the channel\"}",
   [___type] : 'Event type',
   [___source]: 'Context origin/source of the event',
   [___id]: 'Event identifier',
   [___time]: 'Event generation time',
   [___subject]: 'Context subject of the event'
);

.create-or-alter table [Channel] ingestion json mapping "Channel_json_flat"
```
[
  {"column": "___type", "path": "$.type"},
  {"column": "___source", "path": "$.source"},
  {"column": "___id", "path": "$.id"},
  {"column": "___time", "path": "$.time"},
  {"column": "___subject", "path": "$.subject"},
  {"column": "ChannelId", "path": "$.ChannelId"},
  {"column": "CarId", "path": "$.CarId"},
  {"column": "SessionId", "path": "$.SessionId"},
  {"column": "LapId", "path": "$.LapId"},
  {"column": "SampleCount", "path": "$.SampleCount"},
  {"column": "Frequency", "path": "$.Frequency"},
  {"column": "Timespan", "path": "$.Timespan"},
  {"column": "Data", "path": "$.Data"},
]
```


.create-or-alter table [Channel] ingestion json mapping "Channel_json_ce_structured"
```
[
  {"column": "___type", "path": "$.type"},
  {"column": "___source", "path": "$.source"},
  {"column": "___id", "path": "$.id"},
  {"column": "___time", "path": "$.time"},
  {"column": "___subject", "path": "$.subject"},
  {"column": "ChannelId", "path": "$.data.ChannelId"},
  {"column": "CarId", "path": "$.data.CarId"},
  {"column": "SessionId", "path": "$.data.SessionId"},
  {"column": "LapId", "path": "$.data.LapId"},
  {"column": "SampleCount", "path": "$.data.SampleCount"},
  {"column": "Frequency", "path": "$.data.Frequency"},
  {"column": "Timespan", "path": "$.data.Timespan"},
  {"column": "Data", "path": "$.data.Data"},
]
```


.drop materialized-view ChannelLatest ifexists;

.create materialized-view with (backfill=true) ChannelLatest on table Channel {
    Channel | summarize arg_max(___time, *) by ___type, ___source, ___subject
}

.alter table [Channel] policy update
```
[{
  "IsEnabled": true,
  "Source": "_cloudevents_dispatch",
  "Query": "_cloudevents_dispatch | where (specversion == '1.0' and type == 'ForzaMotorsport.Telemetry.Channel') | project['ChannelId'] = tostring(data.['ChannelId']),['CarId'] = tostring(data.['CarId']),['SessionId'] = tostring(data.['SessionId']),['LapId'] = tostring(data.['LapId']),['SampleCount'] = tolong(data.['SampleCount']),['Frequency'] = tolong(data.['Frequency']),['Timespan'] = todynamic(data.['Timespan']),['Data'] = todynamic(data.['Data']),___type = type,___source = source,___id = ['id'],___time = ['time'],___subject = subject",
  "IsTransactional": false,
  "PropagateIngestionProperties": true,
}]
```

.create-merge table [LapSignal] (
   [LapId]: string,
   [CarId]: string,
   [SessionId]: string,
   [Timespan]: dynamic,
   [___type]: string,
   [___source]: string,
   [___id]: string,
   [___time]: datetime,
   [___subject]: string
);

.alter table [LapSignal] column-docstrings (
   [LapId]: "{\"description\": \"The unique identifier of the lap\"}",
   [CarId]: "{\"description\": \"The unique identifier of the car\", \"schema\": [\"null\", \"string\"]}",
   [SessionId]: "{\"description\": \"The unique identifier of the session\", \"schema\": [\"null\", \"string\"]}",
   [___type] : 'Event type',
   [___source]: 'Context origin/source of the event',
   [___id]: 'Event identifier',
   [___time]: 'Event generation time',
   [___subject]: 'Context subject of the event'
);

.create-or-alter table [LapSignal] ingestion json mapping "LapSignal_json_flat"
```
[
  {"column": "___type", "path": "$.type"},
  {"column": "___source", "path": "$.source"},
  {"column": "___id", "path": "$.id"},
  {"column": "___time", "path": "$.time"},
  {"column": "___subject", "path": "$.subject"},
  {"column": "LapId", "path": "$.LapId"},
  {"column": "CarId", "path": "$.CarId"},
  {"column": "SessionId", "path": "$.SessionId"},
  {"column": "Timespan", "path": "$.Timespan"},
]
```


.create-or-alter table [LapSignal] ingestion json mapping "LapSignal_json_ce_structured"
```
[
  {"column": "___type", "path": "$.type"},
  {"column": "___source", "path": "$.source"},
  {"column": "___id", "path": "$.id"},
  {"column": "___time", "path": "$.time"},
  {"column": "___subject", "path": "$.subject"},
  {"column": "LapId", "path": "$.data.LapId"},
  {"column": "CarId", "path": "$.data.CarId"},
  {"column": "SessionId", "path": "$.data.SessionId"},
  {"column": "Timespan", "path": "$.data.Timespan"},
]
```


.drop materialized-view LapSignalLatest ifexists;

.create materialized-view with (backfill=true) LapSignalLatest on table LapSignal {
    LapSignal | summarize arg_max(___time, *) by ___type, ___source, ___subject
}

.alter table [LapSignal] policy update
```
[{
  "IsEnabled": true,
  "Source": "_cloudevents_dispatch",
  "Query": "_cloudevents_dispatch | where (specversion == '1.0' and type == 'ForzaMotorsport.Telemetry.LapSignal') | project['LapId'] = tostring(data.['LapId']),['CarId'] = tostring(data.['CarId']),['SessionId'] = tostring(data.['SessionId']),['Timespan'] = todynamic(data.['Timespan']),___type = type,___source = source,___id = ['id'],___time = ['time'],___subject = subject",
  "IsTransactional": false,
  "PropagateIngestionProperties": true,
}]
```
